name: PR Auto Review & Code Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, dev]

jobs:
  # 코드 품질 검사 및 자동 리뷰
  code-quality:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            **/*.{js,jsx,ts,tsx}
            **/*.json
            **/*.md
          files_ignore: |
            node_modules/**
            .next/**
            .storybook/**
            public/**

      # TypeScript 타입 체크
      - name: TypeScript Check
        id: typecheck
        run: |
          echo "🔍 TypeScript 타입 검사 중..."
          pnpm run typecheck 2>&1 | tee typecheck.log || echo "typecheck_failed=true" >> $GITHUB_OUTPUT

      # ESLint 검사
      - name: ESLint Check
        id: lint
        run: |
          echo "🔍 ESLint 검사 중..."
          pnpm run lint -- --format=json --output-file=eslint-report.json || echo "lint_failed=true" >> $GITHUB_OUTPUT
          pnpm run lint || true

      # Jest 테스트 실행
      - name: Run Tests
        id: test
        run: |
          echo "🧪 테스트 실행 중..."
          pnpm run test -- --coverage --passWithNoTests --testResultsProcessor=jest-junit || echo "test_failed=true" >> $GITHUB_OUTPUT

      # 품질 검사 결과 코멘트
      - name: Comment Quality Check Results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = `## 🤖 자동 코드 품질 검사 결과\n\n`;

            // TypeScript 검사 결과
            const typecheckFailed = '${{ steps.typecheck.outputs.typecheck_failed }}' === 'true';
            if (typecheckFailed) {
              comment += `❌ **TypeScript 타입 검사**: 실패\n`;
              try {
                const typecheckLog = fs.readFileSync('typecheck.log', 'utf8');
                comment += `\`\`\`\n${typecheckLog.slice(0, 1000)}...\n\`\`\`\n\n`;
              } catch (e) {}
            } else {
              comment += `✅ **TypeScript 타입 검사**: 통과\n`;
            }

            // ESLint 검사 결과
            const lintFailed = '${{ steps.lint.outputs.lint_failed }}' === 'true';
            if (lintFailed) {
              comment += `⚠️ **ESLint 검사**: 개선 사항 발견\n`;
            } else {
              comment += `✅ **ESLint 검사**: 통과\n`;
            }

            // 테스트 결과
            const testFailed = '${{ steps.test.outputs.test_failed }}' === 'true';
            if (testFailed) {
              comment += `❌ **테스트**: 실패\n`;
            } else {
              comment += `✅ **테스트**: 통과\n`;
            }

            // 변경된 파일 정보
            const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}'.split(' ').filter(f => f);
            if (changedFiles.length > 0) {
              comment += `\n📝 **변경된 파일** (${changedFiles.length}개):\n`;
              changedFiles.slice(0, 10).forEach(file => {
                comment += `- \`${file}\`\n`;
              });
              if (changedFiles.length > 10) {
                comment += `- ... 및 ${changedFiles.length - 10}개 파일 더\n`;
              }
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # Copilot 리뷰 요청
  copilot-review:
    runs-on: ubuntu-latest
    needs: code-quality
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Request Copilot Review
        uses: actions/github-script@v7
        with:
          script: |
            // 변경사항 분석을 위한 정보 수집
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // 파일 타입별 분류
            const fileTypes = {
              components: files.filter(f => f.filename.includes('components/')),
              pages: files.filter(f => f.filename.includes('pages/') || f.filename.includes('app/')),
              utils: files.filter(f => f.filename.includes('utils/') || f.filename.includes('lib/')),
              types: files.filter(f => f.filename.includes('.types.') || f.filename.endsWith('.d.ts')),
              tests: files.filter(f => f.filename.includes('.test.') || f.filename.includes('.spec.')),
              stories: files.filter(f => f.filename.includes('.stories.')),
              config: files.filter(f => ['package.json', 'tsconfig.json', 'next.config.js', 'tailwind.config.js'].includes(f.filename.split('/').pop()))
            };

            let reviewRequest = `🤖 **GitHub Copilot 자동 리뷰 요청**

            @github-copilot 안녕하세요! 다음 PR을 리뷰해주세요:

            **📋 PR 정보:**
            - 제목: ${pr.title}
            - 변경된 파일: ${files.length}개
            - 추가된 줄: +${pr.additions}
            - 삭제된 줄: -${pr.deletions}

            **🎯 리뷰 포커스 영역:**`;

            // 변경된 파일 타입에 따른 리뷰 가이드
            if (fileTypes.components.length > 0) {
              reviewRequest += `\n- 🧩 **컴포넌트** (${fileTypes.components.length}개): 재사용성, props 타입, 접근성`;
            }
            if (fileTypes.pages.length > 0) {
              reviewRequest += `\n- 📄 **페이지/라우팅** (${fileTypes.pages.length}개): SEO, 성능, 사용자 경험`;
            }
            if (fileTypes.utils.length > 0) {
              reviewRequest += `\n- 🔧 **유틸/라이브러리** (${fileTypes.utils.length}개): 함수 순수성, 에러 핸들링`;
            }
            if (fileTypes.types.length > 0) {
              reviewRequest += `\n- 🏷️ **타입 정의** (${fileTypes.types.length}개): 타입 안정성, 인터페이스 설계`;
            }
            if (fileTypes.tests.length > 0) {
              reviewRequest += `\n- 🧪 **테스트** (${fileTypes.tests.length}개): 테스트 커버리지, 테스트 케이스`;
            }
            if (fileTypes.stories.length > 0) {
              reviewRequest += `\n- 📖 **스토리북** (${fileTypes.stories.length}개): 스토리 완성도, 문서화`;
            }

            reviewRequest += `

            **🔍 특별히 확인해 주세요:**
            - Next.js 15.3.1 최적화 기회
            - React 18.3.1 동시성 기능 활용
            - TypeScript 타입 안정성
            - Tailwind CSS 클래스 최적화
            - 성능 및 접근성 이슈
            - 보안 취약점

            **📚 프로젝트 컨텍스트:**
            - Next.js + TypeScript + TanStack Query + Tailwind CSS
            - 테스팅: Jest + Testing Library
            - 스토리북 문서화
            - Radix UI 컴포넌트 사용

            리뷰 완료 후 개선 제안사항을 알려주세요! 🙏`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: reviewRequest
            });

  # Storybook 빌드 테스트 (선택적)
  storybook-check:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, '.stories.')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Storybook
        run: |
          echo "📖 Storybook 빌드 테스트..."
          pnpm run build-storybook

      - name: Comment Storybook Status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "✅ **Storybook 빌드**: 성공적으로 완료되었습니다!"
            });
